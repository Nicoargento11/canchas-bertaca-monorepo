// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USUARIO
  MODERADOR
  ADMINISTRADOR
}

enum Status {
  APROBADO
  PENDIENTE
  RECHAZADO
}

enum ReserveType {
  NORMAL
  FIJO
}

enum TransactionType {
  RESERVA
  VENTA_PRODUCTO
  SERVICIO
  GASTO
  ESCUELA_FUTBOL
  EVENTO
}

enum PaymentMethod {
  EFECTIVO
  TARJETA_CREDITO
  TRANSFERENCIA
  MERCADOPAGO
  OTRO
}

enum ProductCategory {
  BEBIDA
  COMIDA
  SNACK
  EQUIPAMIENTO
  OTRO
}

enum MovementType {
  COMPRA
  VENTA
  AJUSTE
  PERDIDA
  DEVOLUCION
}

// ---- MODELOS PRINCIPALES ----
model User {
  id                 String          @id @default(cuid())
  name               String
  email              String?         @unique
  emailVerified      DateTime?
  hashedRefreshToken String?
  image              String?
  password           String
  phone              String?
  role               Role            @default(USUARIO)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Reserve            Reserves[]
  FixedSchedule      FixedSchedule[]
}

model Court {
  id           String @id @default(cuid())
  name         String @unique
  numberCourts Int
}

// ---- RESERVAS Y PAGOS ----
model Reserves {
  id                String         @id @default(cuid())
  date              DateTime
  schedule          String
  court             Int
  price             Int?
  reservationAmount Int?
  status            Status         @default(PENDIENTE)
  paymentUrl        String?
  paymentId         String?
  phone             String?
  clientName        String?
  reserveType       ReserveType?
  User              User           @relation(fields: [userId], references: [id])
  userId            String
  paymentToken      String?        @unique
  FixedSchedule     FixedSchedule? @relation(fields: [fixedScheduleId], references: [id])
  fixedScheduleId   String?
  Payment           Payment[]
  consumitions      ProductSale[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  expiresAt         DateTime?
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  method    PaymentMethod
  isPartial Boolean       @default(false)
  reserve   Reserves?     @relation(fields: [reserveId], references: [id])
  reserveId String?
  createdAt DateTime      @default(now())
}

// ---- INVENTARIO Y VENTAS ----

model Product {
  id          String              @id @default(cuid())
  name        String
  description String?
  barcode     String?             @unique
  category    ProductCategory
  stock       Int                 @default(0)
  costPrice   Float
  salePrice   Float
  minStock    Int                 @default(5)
  supplier    String?
  isActive    Boolean             @default(true)
  sales       ProductSale[]
  movements   InventoryMovement[]
}

model ProductSale {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  Reserve   Reserves? @relation(fields: [reserveId], references: [id])
  reserveId String?
  quantity  Int
  price     Float // Precio unitario en venta
  discount  Float?    @default(0)
  isGift    Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model InventoryMovement {
  id             String       @id @default(cuid())
  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  quantity       Int
  type           MovementType
  reason         String?
  documentNumber String?
  createdAt      DateTime     @default(now())
}

// ---- HORARIOS Y TURNOS ----
model Schedule {
  id            String      @id @default(cuid())
  startTime     String
  endTime       String
  rates         Rate[]
  scheduleDay   ScheduleDay @relation(fields: [scheduleDayId], references: [id])
  scheduleDayId String
  benefits      Benefit[]
}

model FixedSchedule {
  id            String      @id @default(cuid())
  startTime     String // Hora de inicio del turno fijo
  endTime       String // Hora de fin del turno fijo
  court         Int // Número de cancha
  isActive      Boolean     @default(true)
  scheduleDay   ScheduleDay @relation(fields: [scheduleDayId], references: [id])
  scheduleDayId String // Relación con el día de la semana
  rate          Rate        @relation(fields: [rateId], references: [id])
  rateId        String // Relación con la tarifa
  reserves      Reserves[] // Relación con las reservas
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ScheduleDay {
  id            String          @id @default(cuid())
  dayOfWeek     Int             @unique // 0 = Sunday, ..., 6 = Saturday
  isActive      Boolean         @default(false)
  schedules     Schedule[] // Un día puede tener varios horarios
  FixedSchedule FixedSchedule[]
}

model Benefit {
  id          String     @id @default(cuid())
  clientType  String // Ejemplo: "Normal", "Fijo", "+10 reservas"
  name        String // Ejemplo: "Descuento por 10 reservas"
  description String? // Opcional: descripción del beneficio
  condition   String? // Opcional: condición para aplicar el beneficio
  discount    Int // Porcentaje o monto fijo de descuento
  schedules   Schedule[] // Relación muchos a muchos con horarios
}

model Rate {
  id                String          @id @default(cuid())
  name              String
  price             Int
  reservationAmount Int
  schedules         Schedule[] // Relación muchos a muchos con horarios
  FixedSchedule     FixedSchedule[]
}

model UnavailableDay {
  id     String   @id @default(cuid())
  date   DateTime @unique // Día específico en el que no se podrá reservar
  reason String? // Opcional: motivo (Ej: "Mantenimiento", "Feriado")
}
